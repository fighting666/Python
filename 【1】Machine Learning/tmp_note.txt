## 魔法函数
%：行魔法函数，只对本行代码生效。 
%%：Cell魔法函数，在整个Cell中生效，必须放于Cell首行。 
%lsmagic：列出所有的魔法函数 
%magic查看各个魔法函数的说明 
?后面加上魔法函数名称，可以查看该函数的说明

%run	调用外部python脚本
%timeit	测试单行语句的执行时间
%%timeit	测试整个单元中代码的执行时间
% matplotlib inline	显示 matplotlib 包生成的图形
%%writefile	写入文件
%pdb	调试程序
%pwd	查看当前工作目录
%ls	查看目录文件列表
%reset	清除全部变量
%who	查看所有全局变量的名称，若给定类型参数，只返回该类型的变量列表
%whos	显示所有的全局变量名称、类型、值/信息
%debug	bug调试，输入quit退出调试
%env	列出全部环境变量

使用分号可以阻止该行函数的结果输出
---------------------------------------------------------------------------------------------------------------------
## jupyter notebook主题背景和字体更改
在控制台下用pip 安装jupyter-themes： 
》pip install --upgrade jupyterthemes
jupyter notebook主题设置
常用：
jt -t oceans16 -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
jt -t grade3 -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
jt -t onedork -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
jt -t monokai -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
不常用：
jt -t solarizedd -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
jt -t gruvboxd -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N
jt -t gruvboxl -f fira -fs 12 -cellw 90% -ofs 10 -dfs 10 -T -N

---------------------------------------------------------------------------------------------------------------------
## jupyter notebook插件，需下载nbextensions
1.1 安装：打开cmd
》conda install -c conda-forge jupyter_contrib_nbextensions 
》conda install -c conda-forge jupyter_nbextensions_configurator
1.2 加载服务器扩展：
》jupyter nbextensions_configurator enable --user
1.3 常用插件：
（1）Collapsible Headings(使得各级标题可缩进)
（2）Table of Contents (2)(添加目录)
（3）Code folding （代码折叠）
（4）Table of Contents：更容易导航
（5）Hinterland（代码自动补全）
（6）ScrollDown 
（7）格式化自动美化代码：code pretty自动格式化插件
先执行命令开启：》jupyter nbextension enable code_prettify/code_prettify
必要的第三方功能模块：》conda install yapf
Ctrl+L快捷键格式化代码

---------------------------------------------------------------------------------------------------------------------
## exceltk用例:（利用excel快速生成MarkDown表格）
（1）整个表格：   
》exceltk.exe -t md -xls xxx.xls  
》exceltk.exe -t md -xls xxx.xlsx
（2）指定sheet：  
》 exceltk.exe -t md -xls xx.xls -sheet sheetname   
》 exceltk.exe -t md -xls xx.xlsx -sheet sheetnameexceltk
（3）特性：
转换Excel表格到MarkDown表格
支持Excel单元格带超链接
如果Excel里有合并的跨行单元格，在转换后的MarkDown里是分开的单元格，这是因为MarkDown本身不支持跨行单元格
如果Excel表格右侧有大量的空列，则会被自动裁剪，算法是根据前100行来检测并计算

---------------------------------------------------------------------------------------------------------------------
## Markdown 使用
（1）标题：
    # 一级标题
    ## 二级标题
    ### 三级标题
（2）**加粗** 或 __加粗__
（3）*斜体*   或 _斜体_
（4）==标记文本== （文字是黄色的背景）
（5）`需要加粉色背景标示的文本`
（6）引用：文字前面加上>和一个空格
    > 一盏灯
（7）~~删除文本~~
（8）无序列表：文字前加上*或-或+，和一个空格
    - 文本1  或  * 文本2  或  + 文本3
    阶梯型：
    - 文本1
      - 文本2
        - 文本3
（9）无序列表：文字前加上1.2.3...，和一个空格
    1. 文本1  或  2. 文本2
（10）链接：[显示文本](链接地址)
    [Google](http://www.google.com)
（11）图片链接：![显示文本](图片链接地址)
（12）代码引用：
    ```python
    多行代码
    ```
（13）任务列表
    - [ ] 计划任务
    - [x] 完成任务   
（14）快捷键
 - 加粗     `Ctrl + B` 
 - 斜体     `Ctrl + I` 
 - 引用     `Ctrl + Q`
 - 插入链接  `Ctrl + L`
 - 插入代码  `Ctrl + K`
 - 插入图片  `Ctrl + G`
 - 提升标题  `Ctrl + H`
 - 有序列表  `Ctrl + O`
 - 无序列表  `Ctrl + U`
 - 横线     `Ctrl + R`
 - 重做     `Ctrl + Y`

---------------------------------------------------------------------------------------------------------------------
## Git常使用命令：
Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识
git config user.name "fighting666"
git config --global user.name "fighting666"
git config --global user.email "1527604318@qq.com"
ps：git config  –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。

一、设置SSH key
1、生成ssh key
(1)首先检查是否已生成密钥 cd ~/.ssh，ls如果有3个文件，则密钥已经生成，id_rsa.pub就是公钥
(2)如果没有生成，那么通过$ ssh-keygen -t rsa -C "1527604318@qq.com"来生成。 一路回车
(3)生成成功后，去对应目录C:\Users\specter\.ssh里（specter为电脑用户名，每个人不同）用记事本打开id_rsa.pub，得到ssh key公钥

2、为github账号配置ssh key(略)

二、上传本地项目到github
1、创建一个本地项目（略）
2、建立本地仓库
（1）cd 进入到项目目录
（2）git init                  # 把这个目录变成Git可以管理的仓库
    git add README.md         # 文件添加到仓库
（3）git add .                 # 一个点就把当前目录下所有未追踪的文件全部add了，不但可以跟单一文件，还可以跟通配符，更可以跟目录。
（4）git commit -m "提交文件"   # 把文件提交到仓库，双引号内是提交注释

3、关联github仓库
到github beautifulDay仓库复制仓库地址
$ git remote add origin git@github.com:fighting666/Python.git

4、上传本地代码
$ git push -u origin master      #把本地库的所有内容推送到远程库上


git status  查看本地分支文件信息，确保更新时不产生冲突 （ no changes added to commit (use "git add" and/or "git commit -a" 说明没有冲突）
git add .   将当前工作目录中更改或者新增的文件加入到Git的索引中
git commit -m "注释内容"  填写注释
git pull origin master 拉一下远端的仓代码，然后弹出的文件，q! 退出即可
git push origin master 把代码推送到远端仓库

三、错误处理：
错误1：git push报错error: failed to push some refs to 'git@github.com:
原因：GitHub远程仓库中的README.md文件不在本地仓库中。 
解决方案：
$ git pull --rebase origin master
$ git push -u origin master

错误2：github常见操作和常见错误！错误提示：fatal: remote origin already exists.
如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git 
提示出错信息：fatal: remote origin already exists.
解决办法如下：
1、先输入$ git remote rm origin
2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！


